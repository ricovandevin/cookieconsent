<?php

/**
 * @file
 * Contains cookieconsent.module.
 */

/**
 * Implements hook_help().
 */
function cookieconsent_help($path, $arg) {
  switch ($path) {
    // Main module help for the cookieconsent module.
    case 'admin/help#cookieconsent':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('CookieConsent uses the Cookie Consent javascript library for alerting users about the use of cookies on your website') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_permission().
 */
function cookieconsent_permission() {
  return array(
    'administer cookieconsent settings' => array(
      'title' => t('Administer CookieConsent Settings'),
      'description' => t('Administer the CookieConsent settings to control the appearance of the popup'),
    ),
    'exclude from cookieconsent' => array(
      'title' => t('Exclude role from CookieConsent'),
      'description' => t('Control which roles are excluded from seeing the popup'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cookieconsent_menu() {
  $items = array();

  $items['admin/config/system/cookieconsent'] = array(
    'title' => t('Cookie settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cookieconsent_settings_form'),
    'access arguments' => array('administer cookieconsent settings'),
    'file' => 'includes/cookieconsent.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_variable_group_info().
 */
function cookieconsent_variable_group_info() {
  $groups = array();

  $groups['cookieconsent'] = array(
    'title' => t('CookieConsent'),
    'description' => t('Settings for CookieConsent'),
    'access' => 'administer cookieconsent settings',
    'path' => array('admin/config/system/cookieconsent'),
  );

  return $groups;
}

/**
 * Implements hook_variable_info().
 */
function cookieconsent_variable_info($options) {
  $variables = array();

  $variables['cookieconsent_headline_text'] = array(
    'type' => 'string',
    'group' => 'cookieconsent',
    'title' => t('Headline Text', array(), $options),
    'description' => t('The message shown by the plugin.', array(), $options),
    'default' => 'This website uses cookies to ensure you get the best experience on our website',
    'localize' => TRUE,
  );

  $variables['cookieconsent_accept_button_text'] = array(
    'type' => 'string',
    'group' => 'cookieconsent',
    'title' => t('Accept button text', array(), $options),
    'default' => 'Got it!',
    'localize' => TRUE,
  );

  $variables['cookieconsent_read_more_button_text'] = array(
    'type' => 'string',
    'group' => 'cookieconsent',
    'title' => t('Read more button text', array(), $options),
    'description' => t('The text shown on the link to the cookie policy (requires the Cookie policy option to also be set)', array(), $options),
    'default' => 'More info',
    'localize' => TRUE,
  );

  return $variables;
}

/**
 * Implements hook_theme().
 */
function cookieconsent_theme($existing, $type, $theme, $path) {
  return array(
    'cookieconsent' => array(
      'variables' => array(
        'dismiss' => '',
        'message' => '',
        'target' => '',
        'link' => '',
        'learn_more' => '',
      ),
    ),
  );
}

/**
 * Implements hook_library().
 */
function cookieconsent_library() {
  $libraries = array();

  $libraries['cookieconsent'] = array(
    'version' => '1.0.9',
    'js' => array(
      drupal_get_path('module', 'cookieconsent') . '/js/cookieconsent.js' => array(),
    ),
  );

  $libraries['cookieconsent-min'] = array(
    'version' => '1.0.9',
    'js' => array(
      drupal_get_path('module', 'cookieconsent') . '/js/cookieconsent-min.js' => array(),
    ),
  );

  $libraries['settings'] = array(
    'version' => '1.x',
    'js' => array(
      drupal_get_path('module', 'cookieconsent') . '/js/cookieconsent.settings.js' => array(),
    ),
    'dependencies' => array('drupal.settings'),
  );

  $libraries['dark-bottom'] = array(
    'version' => '1.x',
    'css' => array(
      drupal_get_path('module', 'cookieconsent') . '/css/dark-bottom.css' => array(),
    ),
  );

  $libraries['dark-floating'] = array(
    'version' => '1.x',
    'css' => array(
      drupal_get_path('module', 'cookieconsent') . '/css/dark-floating.css' => array(),
    ),
  );

  $libraries['dark-top'] = array(
    'version' => '1.x',
    'css' => array(
      drupal_get_path('module', 'cookieconsent') . '/css/dark-top.css' => array(),
    ),
  );

  $libraries['light-bottom'] = array(
    'version' => '1.x',
    'css' => array(
      drupal_get_path('module', 'cookieconsent') . '/css/light-bottom.css' => array(),
    ),
  );

  $libraries['light-floating'] = array(
    'version' => '1.x',
    'css' => array(
      drupal_get_path('module', 'cookieconsent') . '/css/light-floating.css' => array(),
    ),
  );

  $libraries['light-top'] = array(
    'version' => '1.x',
    'css' => array(
      drupal_get_path('module', 'cookieconsent') . '/css/light-top.css' => array(),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_page_alter().
 */
function cookieconsent_page_alter(&$page) {
  global $cookie_domain;

  // Does the popup has to be shown for this user?
  $exclude_from_consent = user_access('exclude from cookieconsent');

  // If not then proceed.
  if (!$exclude_from_consent) {
    // Add the CookieConsent options.
    drupal_add_library('cookieconsent', 'settings');

    if (variable_get('cookieconsent_customise')) {
      // Set our custom texts.
      drupal_add_js(array(
        'cookieconsent' => array(
          'message' => variable_get('cookieconsent_headline_text'),
          'dismiss' => variable_get('cookieconsent_accept_button_text'),
          'learnMore' => variable_get('cookieconsent_read_more_button_text'),
        ),
      ), 'setting');
    }

    drupal_add_js(array(
      'cookieconsent' => array(
        'link' => variable_get('cookieconsent_cookie_policy'),
        'path' => variable_get('cookieconsent_path'),
        'expiry' => variable_get('cookieconsent_expiry'),
        'target' => variable_get('cookieconsent_target'),
        'domain' => $cookie_domain,
      ),
    ), 'setting');

    // Render the template and pass it over to our javascript.
    $element = array(
      '#theme' => 'cookieconsent',
      '#dismiss' => variable_get('cookieconsent_accept_button_text'),
      '#message' => variable_get('cookieconsent_headline_text'),
      '#target' => variable_get('cookieconsent_target'),
      '#link' => $alias,
      '#learn_more' => variable_get('cookieconsent_read_more_button_text'),
    );
    $markup = drupal_render($element);

    drupal_add_js(array(
      'cookieconsent' => array(
        'markup' => (string) $markup,
      ),
    ), 'setting');

    // Determine if a container is used.
    $container = variable_get('cookieconsent_container');
    $container = empty($container) ? variable_get('cookieconsent_container') : NULL;
    drupal_add_js(array(
      'cookieconsent' => array(
        'container' => $container,
      ),
    ), 'setting');

    // Determine what theme to use.
    $theme = variable_get('cookieconsent_theme');
    if ($theme === 'none') {
      $theme_path = variable_get('cookieconsent_theme_path');
    }
    else {
      // Add our CSS library that contains the CSS of the chosen theme
      // (see hook_library()).
      drupal_add_library('cookieconsent', $theme);
      // Set it to FALSE, so no external theme is being loaded.
      $theme_path = FALSE;
    }
    drupal_add_js(array(
      'cookieconsent' => array(
        'theme' => $theme_path,
      ),
    ), 'setting');

    // Add the CookieConsent library itself.
    if (variable_get('cookieconsent_minified')) {
      $cookieconsent = 'cookieconsent-min';
    }
    else {
      $cookieconsent = 'cookieconsent';
    }
    drupal_add_library('cookieconsent', $cookieconsent);
  }
}
